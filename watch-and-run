#!/bin/bash
#
# Run a command upon any change to files in a given directory
#
# author: Rune Juhl Jacobsen
# license: GPL-3.0

usage() {
  cat <<EOF
Usage: $0

Use the following environment variables for control:

- BACKGROUND
  Execute the command in the background
- DIR
  Set the directory to watch, defaults to \$(pwd)
- IGNORE_EMACS
  Ignore emacs temp files
- IGNORE_GIT
  Ignore changes in the git directory
- IGNORE_VIM
  Ignore vim swp files

Any value except \`[Nn0]|no\` enables a given setting.
EOF
}

if [[ $1 =~ -h|--help|help ]]; then
  usage
  exit 0
fi


declare -ag exclude=()
DIR="${DIR:-$(pwd)}"

function env_is_falsey() {
  [[ "${!1}" =~ [Nn0]|no ]]
}

function exclude_if_set() {
  # Add an argument to the array of exclude lines, if the given env is set to
  # anything but the values that disable.
  env_is_falsey "$1" && return

  exclude+=( "$2" )
}

BACKGROUND=$(env_is_falsey BACKGROUND || echo \&)
exclude_if_set IGNORE_EMACS "--exclude '/.#.+'"    # ignore emacs tmp
exclude_if_set IGNORE_GIT "--exclude '^\./\.git/'" # exclude git itself
exclude_if_set IGNORE_VIM '--exclude ~$'           # ignore vim tmp

while true; do

  change=$(eval inotifywait \
                --recursive            \
                --exclude '^\.$'       \
                --event attrib         \
                --event create         \
                --event modify         \
                --event delete         \
                --quiet                \
                "${exclude[*]}"        \
                "${DIR}")

  [[ "$change" =~ ISDIR ]] && continue

  eval "${@}" "${BACKGROUND}"

done
